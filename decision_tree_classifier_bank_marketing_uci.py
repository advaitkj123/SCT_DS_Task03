# -*- coding: utf-8 -*-
"""decision tree classifier_Bank marketing UCI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lU2ON2ixPeNdQnmyLxsi-YRQoTwDq-Pf
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import warnings
warnings.filterwarnings('ignore')


try:
    data = pd.read_csv('bank-full.csv', sep=';')
except FileNotFoundError:
    print("Error: 'bank-full.csv' not found. Please ensure the file is in the same directory.")
    exit()


X = data.drop('y', axis=1)
y = data['y']
le = LabelEncoder()
y_encoded = le.fit_transform(y)
y_names = le.classes_

X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded)


numerical_features = X.select_dtypes(include=['int64']).columns
categorical_features = X.select_dtypes(include=['object']).columns


preprocessor = ColumnTransformer(
    transformers=[
        ('num', 'passthrough', numerical_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ])

pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                           ('classifier', DecisionTreeClassifier(max_depth=5, random_state=42))])

pipeline.fit(X_train, y_train)
y_pred = pipeline.predict(X_test)



fig, axes = plt.subplots(1, 2, figsize=(15, 6))


sns.histplot(data=data, x='age', hue='y', kde=True, ax=axes[0])
axes[0].set_title('Age Distribution by Subscription Status')


sns.countplot(data=data, x='marital', hue='y', ax=axes[1])
axes[1].set_title('Marital Status by Subscription Status')
plt.tight_layout()
plt.show()

cm = confusion_matrix(y_test, y_pred, labels=[0, 1])


disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)
disp.plot(cmap=plt.cm.Blues)
plt.title('Confusion Matrix for Decision Tree Classifier')
plt.show()


plt.figure(figsize=(20, 10))
tree_classifier = pipeline.named_steps['classifier']
feature_names = list(numerical_features) + list(pipeline.named_steps['preprocessor'].named_transformers_['cat'].get_feature_names_out(categorical_features))
plot_tree(tree_classifier,
          filled=True,
          rounded=True,
          class_names=y_names,
          feature_names=feature_names,
          max_depth=3,
          fontsize=8)
plt.title('Decision Tree Visualization (First 3 levels)')
plt.show()